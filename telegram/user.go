package telegram

import (
	log "Davinchik/pkg/logger"
	"Davinchik/storage/cache"
	psql "Davinchik/storage/postresql"
	"context"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"strconv"
)

var CreatingUsers map[int]*User

func init() {
	CreatingUsers = make(map[int]*User)
}

type User struct {
	UserID    int    `json:"user_id" bson:"user_id"`
	UserName  string `json:"user_name" bson:"user_name"`
	ChatID    int64  `json:"chat_id" bson:"chat_id"`
	Name      string `json:"name" bson:"name"`
	Gender    string `json:"gender" bson:"gender"`
	Age       int    `json:"age" bson:"age"`
	Bio       string `json:"bio" bson:"bio"`
	PhotoID   string `json:"photo_id" bson:"photo_id"`
	LastIntro int64  `bson:"last_intro"`

	channelInput  chan *tgbotapi.Update
	channelOutput chan OutputAnswer

	ready bool // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
}

type OutputAnswer struct {
	ChatID  int64
	Text    string
	PhotoID string
}

var commands = map[string]func(*User) OutputAnswer{
	"let`s go": letsGo,
	"‚ù§Ô∏è":       like,
	"ü•¥":        unLike,
	"üò¥":        sleep,
}

func letsGo(user *User) OutputAnswer {
	var introUser User
	if user.Gender == "–º—É–∂" {

		pipeline := []bson.M{bson.M{"$match": bson.M{"gender": "–∂–µ–Ω"}}, bson.M{"$sample": bson.M{"size": 1}}}
		cursor, err := cache.Collection.Aggregate(context.Background(), pipeline)
		if err != nil {
			log.Logger.Error.Println("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ç–∞—â–∏—Ç—å –º—É–∂—á–∏–Ω—É –∏–∑ cache: ", err)
		}

		var results []bson.M
		if err = cursor.All(context.TODO(), &results); err != nil {
			log.Logger.Error.Println("–Ω–µ —Å—á–∏—Ç–∞–ª–æ—Å—å —Å –∫—É—Ä—Å–æ—Ä–∞: ", err)
		}
		for _, result := range results {
			introUser.ChatID = result["chat_id"].(int64)
			introUser.Name = fmt.Sprintf("%v", result["name"])
			introUser.Age = int(result["age"].(int32))
			introUser.Bio = fmt.Sprintf("%v", result["bio"])
			introUser.PhotoID = fmt.Sprintf("%v", result["photo_id"])
		}
	} else {
		pipeline := []bson.M{bson.M{"$match": bson.M{"gender": "–º—É–∂"}}, bson.M{"$sample": bson.M{"size": 1}}}
		cursor, err := cache.Collection.Aggregate(context.Background(), pipeline)
		if err != nil {
			log.Logger.Error.Println("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ç–∞—â–∏—Ç—å –∂–µ–Ω—â–∏–Ω—É –∏–∑ cache: ", err)
		}

		var results []bson.M
		if err = cursor.All(context.TODO(), &results); err != nil {
			log.Logger.Error.Println("–Ω–µ —Å—á–∏–∞–ª–æ—Å—å —Å –∫—É—Ä—Å–æ—Ä–∞: ", err)
		}
		for _, result := range results {
			introUser.ChatID = result["chat_id"].(int64)
			introUser.Name = fmt.Sprintf("%v", result["name"])
			introUser.Age = int(result["age"].(int32))
			introUser.Bio = fmt.Sprintf("%v", result["bio"])
			introUser.PhotoID = fmt.Sprintf("%v", result["photo_id"])
		}
	}
	updateUserInCache(user, introUser.ChatID)
	text := introUser.Name + ", " + strconv.Itoa(introUser.Age) + " –ª–µ—Ç. " + introUser.Bio
	answer := OutputAnswer{
		ChatID:  user.ChatID,
		Text:    text,
		PhotoID: introUser.PhotoID,
	}
	return answer
}

func like(u *User) OutputAnswer {
	var answer OutputAnswer

	if _, err := bot.Send(tgbotapi.NewPhotoShare(u.LastIntro, u.PhotoID)); err != nil {
		log.Logger.Error.Printf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ", u.LastIntro, " : ", err)
	}
	if _, err := bot.Send(tgbotapi.NewMessage(u.LastIntro, fmt.Sprintf("–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å‚ù§Ô∏è @"+u.UserName+"\n"+
		u.Name+", "+strconv.Itoa(u.Age)+". "+u.Bio))); err != nil {
		log.Logger.Error.Println("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ lastIntro: ", err)
	}

	answer = letsGo(u)
	answer.Text = "–í–∞—à –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ:\n " + answer.Text
	return answer
}

func sleep(user *User) OutputAnswer {
	var answer OutputAnswer
	answer = OutputAnswer{
		ChatID: user.ChatID,
		Text: `–ø–æ—Å–∏–¥–∏–º –ø–æ–¥–æ–∂–¥—ë–º...

–í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞: ` + user.Name + ", " + strconv.Itoa(user.Age) + ". " + user.Bio,
		PhotoID: user.PhotoID,
	}
	return answer
}

func unLike(user *User) OutputAnswer {
	var answer OutputAnswer
	answer = letsGo(user)
	return answer
}

func (u *User) HandlerCommand() {
	command := <-u.channelInput
	answer := commands[command.Message.Text](u)
	u.channelOutput <- answer
}

func (u *User) ChannelInputHandler(update *tgbotapi.Update) {
	u.channelInput <- update
}

func (u *User) GetChannelOutput() chan OutputAnswer {
	return u.channelOutput
}

func updateUserInCache(user *User, introChatID int64) {
	filter := bson.M{"user_id": user.UserID}
	update := bson.M{"$set": bson.M{"last_intro": introChatID}}

	if _, err := cache.Collection.UpdateOne(context.Background(), filter, update); err != nil {
		log.Logger.Error.Println("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å lastIntro: ", err)
	}
}

func setUserInCache(user *User) error {
	if _, err := cache.Collection.InsertOne(context.Background(), user); err != nil {
		return err
	}
	log.Logger.Process.Println("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –≤ mongoDB")
	return nil
}

func GetUserInCache(userID int) (*User, error) {

	filter := bson.M{"user_id": userID}

	var user User

	if err := cache.Collection.FindOne(context.Background(), filter).Decode(&user); err != nil {

		log.Logger.Error.Println("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—á–∏—Ç–∞–Ω –∏–∑ cache: ", err)
		return nil, err
	}
	log.Logger.Process.Println("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–Ω –∏–∑ cache ")

	return &user, nil
}

func GetUserInCacheMulti(filter interface{}) ([]*User, error) {
	var users []*User

	cur, err := cache.Collection.Find(context.Background(), filter)
	if err != nil {
		return users, err
	}

	for cur.Next(context.Background()) {
		var u User
		if err := cur.Decode(&u); err != nil {
			return users, err
		}
		users = append(users, &u)
	}

	if err := cur.Err(); err != nil {
		return users, err
	}
	if err := cur.Close(context.Background()); err != nil {
		return users, err
	}
	if len(users) == 0 {
		return users, mongo.ErrNoDocuments
	}

	return users, nil
}

func DeleteUserInCache(userID int) error {
	filter := bson.M{"user_id": userID}

	res, err := cache.Collection.DeleteOne(context.Background(), filter)
	if err != nil {
		return err
	}
	if res.DeletedCount == 0 {
		return errors.New("no user were deleted")
	}
	return nil
}

func AddUserInDataBase(u *User) error {

	q := "INSERT INTO users (user_id, chat_id, name, gender, age, bio, file_id, user_name) VALUES ($1,$2, $3, $4, $5, $6, $7, $8)"

	if _, err := psql.DB.Exec(context.Background(), q, u.UserID, u.ChatID, u.Name, u.Gender, u.Age, u.Bio, u.PhotoID, u.UserName); err != nil {
		e := fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ dataBase: %v", err)
		return errors.New(e)
	}
	log.Logger.Process.Println("–í DataBase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	return nil
}

func CheckUserInBase(userID int) (*User, bool) {
	q := "SELECT user_id, chat_id, name, gender, age, bio, file_id, user_name FROM users where user_id = $1"

	var user User

	if err := psql.DB.QueryRow(context.Background(), q, userID).Scan(
		&user.UserID,
		&user.ChatID,
		&user.Name,
		&user.Gender,
		&user.Age,
		&user.Bio,
		&user.PhotoID,
		&user.UserName,
	); err != nil {
		log.Logger.Error.Println("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
		return nil, false
	}

	return &user, true
}
